generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Cliente {
  id       String    @id @default(uuid())
  nome     String
  cpf      String    @unique
  rg       String?
  telefone String?
  endereco String?
  cidade   String?
  estado   String?
  locacoes Locacao[] @relation("ClienteComLocacao")

  @@index([cpf])
}

model TipoProduto {
  id       String    @id @default(uuid())
  nome     String
  produtos Produto[] @relation("TipoProdutoComProduto")
}

model Produto {
  id              String      @id @default(uuid())
  tipoProdutoId   String // Foreign Key to TipoProduto
  tipoProduto     TipoProduto @relation("TipoProdutoComProduto", fields: [tipoProdutoId], references: [id])
  plaqueta        Int         @unique // Plaqueta é a numeração da máquina/mesa
  estaLocada      Boolean     @default(false) //quando locar, deve ser alterado para true, quando 
  														//estiver no estoque deve retornar para false, para um nova locação
  locacoes        Locacao[]   @relation("ProdutoComLocacao")
  contadorRelogio Int         @default(0)

  @@index([tipoProdutoId])
}

model Rota {
  id            String         @id @default(uuid())
  nome          String
  locacoes      Locacao[]      @relation("RotaComLocacao")
  acessosNaRota AcessoNaRota[] @relation("RotaComAcessoNaRota")
}

model Locacao {
  id                  String     @id @default(uuid())
  produtoId           String // Foreign Key to Produto
  produto             Produto    @relation("ProdutoComLocacao", fields: [produtoId], references: [id])
  clienteId           String // Foreign Key to Cliente
  cliente             Cliente    @relation("ClienteComLocacao", fields: [clienteId], references: [id])
  rotaId              String // Foreign Key to Rota
  rota                Rota       @relation("RotaComLocacao", fields: [rotaId], references: [id])
  ehTipoLocacaoMensal Boolean    @default(false) // se locação for mensal, então usar valor_mensal, caso não utilizar valor ficha
  valorMensal         Float      @default(0)
  porcentagemEmpresa  Float      @default(0)
  porcentagemCliente  Float      @default(0)
  valorFicha          Float      @default(0)
  cobrancas           Cobranca[] @relation("LocacaoComCobranca") // uma locação pode ter várias cobranças
  valorSaldoDevedor   Float      @default(0)

  @@index([produtoId])
  @@index([rotaId])
  @@index([clienteId])
}

model Cobranca {
  id         String  @id @default(uuid())
  cobrancaId String // Foreign Key to Cobranca
  cobranca   Locacao @relation("LocacaoComCobranca", fields: [cobrancaId], references: [id])

  valorSaldoDevedorAnterior Float @default(0)

  relogioAtual    Int @default(0) // preenchido manual pelo cobrador
  partidasJogadas Int @default(0) // calculado automaticamente
  descontoPartida Int @default(0) // preenchido manual pelo cobrador

  valorEmpresa          Float @default(0) // calculado automaticamente
  valorDescontoEmpresa  Float @default(0) // preenchido manual pelo cobrador, limitado ao valor da cobrança atual, 
  														// para n impactar no saldo devedor
  valorAcrescimoEmpresa Float @default(0) // preenchido manual pelo cobrador, limitado ao valor da cobrança atual, 
  														// para n impactar no saldo devedor

  valorParaEmpresaReceber  Float @default(0) // calculado automaticamente
  valorRecebidoPelaEmpresa Float @default(0) // preenchido manual pelo cobrador

  valorParaClienteReceber  Float @default(0) // calculado automaticamente
  valorRecebidoPeloCliente Float @default(0) // preenchido manual pelo cobrador

  valorParaProximaCobranca Float @default(0) // calculado automaticamente

  @@index([cobrancaId])
}

model Usuario {
  id            String         @id @default(uuid())
  nome          String
  senha         String
  acessosNaRota AcessoNaRota[] @relation("UsuarioComAcessoNaRota")
}

model AcessoNaRota {
  id        String  @id @default(uuid())
  usuarioId String // Foreign Key to Usuario
  usuario   Usuario @relation("UsuarioComAcessoNaRota", fields: [usuarioId], references: [id])
  rotaId    String // Foreign Key to Rota
  rota      Rota    @relation("RotaComAcessoNaRota", fields: [rotaId], references: [id])

  @@index([rotaId])
  @@index([usuarioId])
}
